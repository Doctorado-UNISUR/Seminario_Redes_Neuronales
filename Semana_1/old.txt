using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;

class Penguin
{
    public string Species;
    public double BillDepthMm;
    public double FlipperLengthMm;
}

class Program
{
    static int Paso(double x) => x < 0 ? 0 : 1;

    static double F(Penguin x, double w1, double w2, double b) =>
        w1 * x.BillDepthMm + w2 * x.FlipperLengthMm + b;

    static int Clasificar(Penguin x, double w1, double w2, double b) => Paso(F(x, w1, w2, b));

    static (double w1, double w2, double b) Entrenar(List<Penguin> datos, int iteraciones, double lr = 0.01)
    {
        double w1 = 0, w2 = 0, b = 0;
        for (int epoca = 1; epoca <= iteraciones; epoca++)
        {
            foreach (var x in datos)
            {
                int etiquetaReal = x.Species == "Gentoo" ? 1 : 0;
                int clase = Clasificar(x, w1, w2, b);

                if (etiquetaReal == 1 && clase == 0)
                {
                    w1 += x.BillDepthMm * lr;
                    w2 += x.FlipperLengthMm * lr;
                    b += 1 * lr;
                }
                else if (etiquetaReal == 0 && clase == 1)
                {
                    w1 -= x.BillDepthMm * lr;
                    w2 -= x.FlipperLengthMm * lr;
                    b -= 1 * lr;
                }
            }
            Console.WriteLine($"Época {epoca}: w1={w1:F4}, w2={w2:F4}, b={b:F4}");
        }
        return (w1, w2, b);
    }

    static void Probar(List<Penguin> data, double w1, double w2, double b)
    {
        int correctos = 0, incorrectos = 0;
        foreach (var x in data)
        {
            int clase = Clasificar(x, w1, w2, b);
            int etiquetaReal = x.Species == "Gentoo" ? 1 : 0;

            if (clase == etiquetaReal)
            {
                Console.WriteLine($"Correcto {x.Species} {clase} {F(x, w1, w2, b):F2}");
                correctos++;
            }
            else
            {
                incorrectos++;
                Console.WriteLine(clase == 1 ? "Es NO Gentoo etiquetado Incorrectamente" : "Es Gentoo etiquetado Incorrectamente");
            }
        }
        Console.WriteLine("\nResultados:");
        Console.WriteLine($"Correctos: {correctos} - {(correctos * 100.0 / data.Count):F2}%");
        Console.WriteLine($"Incorrectos: {incorrectos} - {(incorrectos * 100.0 / data.Count):F2}%");
    }

    static List<Penguin> CargarDatos(string path)
    {
        var lines = File.ReadAllLines(path);
        var data = new List<Penguin>();
        foreach (var line in lines.Skip(1))
        {
            var cols = line.Split(',');
            if (cols.Length < 6) continue;
            if (cols[3] == "NA" || cols[4] == "NA") continue;
            try
            {
                data.Add(new Penguin
                {
                    Species = cols[0],
                    BillDepthMm = double.Parse(cols[3], CultureInfo.InvariantCulture),
                    FlipperLengthMm = double.Parse(cols[4], CultureInfo.InvariantCulture)
                });
            }
            catch { }
        }
        return data;
    }

    static void CrossValidation(List<Penguin> data, int k = 5, int epocas = 100, double lr = 0.01)
    {
        var rand = new Random();
        var shuffled = data.OrderBy(x => rand.Next()).ToList();
        int foldSize = data.Count / k;
        double totalAccuracy = 0;

        for (int fold = 0; fold < k; fold++)
        {
            var test = shuffled.Skip(fold * foldSize).Take(foldSize).ToList();
            var train = shuffled.Take(fold * foldSize).Concat(shuffled.Skip((fold + 1) * foldSize)).ToList();

            var pesos = Entrenar(train, epocas, lr);

            int correctos = 0;
            foreach (var x in test)
            {
                int clase = Clasificar(x, pesos.w1, pesos.w2, pesos.b);
                int etiquetaReal = x.Species == "Gentoo" ? 1 : 0;
                if (clase == etiquetaReal) correctos++;
            }
            double acc = 100.0 * correctos / test.Count;
            totalAccuracy += acc;
            Console.WriteLine($"Fold {fold + 1}: {acc:F2}% de acierto ({correctos}/{test.Count})");
        }
        Console.WriteLine($"\nPrecisión promedio: {(totalAccuracy / k):F2}%");
    }

    static void Main(string[] args)
    {
        List<Penguin> data = null;
        List<Penguin> entrenamiento = null;
        List<Penguin> pruebas = null;
        (double w1, double w2, double b) pesos = (0, 0, 0);
        bool entrenado = false;

        while (true)
        {
            Console.WriteLine("\n--- MENÚ PERCEPTRÓN PINGÜINOS ---");
            Console.WriteLine("1. Cargar datos");
            Console.WriteLine("2. Dividir datos (80% entrenamiento, 20% prueba)");
            Console.WriteLine("3. Entrenar perceptrón");
            Console.WriteLine("4. Probar perceptrón");
            Console.WriteLine("5. Validación cruzada");
            Console.WriteLine("6. Salir");
            Console.Write("Seleccione una opción: ");
            var opcion = Console.ReadLine();

            if (opcion == "1")
            {
                Console.Write("Ruta del archivo CSV (ejemplo: penguins_size.csv): ");
                string path = Console.ReadLine();
                if (!File.Exists(path))
                {
                    Console.WriteLine("Archivo no encontrado.");
                    continue;
                }
                data = CargarDatos(path);
                Console.WriteLine($"Datos cargados: {data.Count}");
                entrenado = false;
            }
            else if (opcion == "2")
            {
                if (data == null || data.Count == 0)
                {
                    Console.WriteLine("Primero cargue los datos.");
                    continue;
                }
                var rand = new Random();
                data = data.OrderBy(x => rand.Next()).ToList();
                int splitIndex = (int)(data.Count * 0.8);
                entrenamiento = data.Take(splitIndex).ToList();
                pruebas = data.Skip(splitIndex).ToList();
                Console.WriteLine($"Datos divididos: {entrenamiento.Count} entrenamiento, {pruebas.Count} prueba.");
                entrenado = false;
            }
            else if (opcion == "3")
            {
                if (entrenamiento == null || entrenamiento.Count == 0)
                {
                    Console.WriteLine("Primero divida los datos.");
                    continue;
                }
                Console.Write("Número de épocas (ejemplo: 100): ");
                int epocas = int.TryParse(Console.ReadLine(), out int e) ? e : 100;
                Console.Write("Tasa de aprendizaje (ejemplo: 0.01): ");
                double lr = double.TryParse(Console.ReadLine(), NumberStyles.Any, CultureInfo.InvariantCulture, out double l) ? l : 0.01;
                pesos = Entrenar(entrenamiento, epocas, lr);
                entrenado = true;
            }
            else if (opcion == "4")
            {
                if (!entrenado || pruebas == null || pruebas.Count == 0)
                {
                    Console.WriteLine("Primero entrene el perceptrón.");
                    continue;
                }
                Probar(pruebas, pesos.w1, pesos.w2, pesos.b);
            }
            else if (opcion == "5")
            {
                if (data == null || data.Count == 0)
                {
                    Console.WriteLine("Primero cargue los datos.");
                    continue;
                }
                Console.Write("Número de pliegues (k) para validación cruzada (ejemplo: 5): ");
                int k = int.TryParse(Console.ReadLine(), out int val) ? val : 5;
                Console.Write("Número de épocas (ejemplo: 100): ");
                int epocas = int.TryParse(Console.ReadLine(), out int e) ? e : 100;
                Console.Write("Tasa de aprendizaje (ejemplo: 0.01): ");
                double lr = double.TryParse(Console.ReadLine(), NumberStyles.Any, CultureInfo.InvariantCulture, out double l) ? l : 0.01;
                CrossValidation(data, k, epocas, lr);
            }
            else if (opcion == "6")
            {
                if (data == null || data.Count == 0)
                {
                    Console.WriteLine("Primero cargue los datos.");
                    continue;
                }
                Console.Write("Número de folds (ejemplo: 5): ");
                int folds = int.TryParse(Console.ReadLine(), out int f) ? f : 5;
                CrossValidation(data, folds);
            }
            else
            {
                Console.WriteLine("Opción no válida.");
            }
        }
    }
}
